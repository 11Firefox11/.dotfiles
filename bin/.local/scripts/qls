#!/usr/bin/env bash
REFRESH_JS="(async () => { while (true) { try { const response = await fetch('/__watch'); const reader = response.body.getReader(); while (true) { const { done, value } = await reader.read(); if (done) break; const valueDecoded = (new TextDecoder().decode(value)); window.location.reload(); } } catch { await new Promise(r => setTimeout(r, 1000)); } } })();"
while [[ "$1" != "" ]]; do
  case $1 in
    --handle)
      HANDLE=true
      ;;
    --port=*)
      PORT="${1#*=}"
      ;;
    --ignore=*)
      IGNORE="${1#*=}"
      ;;
  esac
  shift
done

if [[ "$HANDLE" = true ]]; then
  while read line; do
    trline=`echo $line | tr -d '[\r\n]'`

    [ -z "$trline" ] && break

    HEADLINE_REGEX='(.*?)\s(.*?)\sHTTP.*?'

    [[ "$trline" =~ $HEADLINE_REGEX ]] &&
      REQUEST=$(echo $trline | sed -E "s/$HEADLINE_REGEX/\1 \2/")
  done

  if [[ "$REQUEST" =~ ^GET\ (/.*) ]]; then
    FILEPATH="${BASH_REMATCH[1]}"
    HEADERS=""
    BODY=""
    if [[ "$FILEPATH" == "/__watch" ]]; then
      RESPONSE="HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nTransfer-Encoding: chunked\r\n"
      echo -e $RESPONSE
      while true; do
        changedPath=$(inotifywait --event=modify,move,create,delete,delete_self --recursive . --format "%w%f" -q)
        size=$(echo -n "$changedPath" | wc -c | xargs printf "%X")
        echo -ne "$size\r\n$changedPath\r\n"
      done

      echo -ne "0\r\n\r\n"
      exit 0
    fi
    SAFEFILE=$(realpath --relative-base=. ".$FILEPATH" 2>/dev/null)

    if [[ $? -ne 0 || "$SAFEFILE" == ..* || ! -e "$SAFEFILE" || -d "$SAFEFILE" ]]; then
      HEADERS="HTTP/1.1 404 Not Found"
      BODY="Not Found"
    else
      MIME_TYPE=$(mimetype -b "$SAFEFILE")
      HEADERS="HTTP/1.1 200 OK\r\nContent-Type: $MIME_TYPE"
      if [[ "$MIME_TYPE" == text/* ]]; then
        FILE_CONTENT=$(cat "$SAFEFILE")
        if [[ $MIME_TYPE == "text/html" ]]; then
          FILE_CONTENT="$FILE_CONTENT<script>$REFRESH_JS</script>_"
        fi
        CONTENT_LENGTH=$(echo -n "$FILE_CONTENT" | wc -c)
        HEADERS="$HEADERS\r\nContent-Length: $CONTENT_LENGTH"
        BODY="$FILE_CONTENT"
      else
        CONTENT_LENGTH=$(stat --format="%s" "$SAFEFILE")
        HEADERS="$HEADERS\r\nContent-Length: $CONTENT_LENGTH"
        echo -e "$HEADERS\r\n"
        dd if="$SAFEFILE" bs=1M status=none
        exit 0
      fi
    fi
  else
    HEADERS="HTTP/1.1 404 Not Found"
    BODY="Not Found"
  fi

  echo -e "$HEADERS\r\n\r\n"
  printf "%s" "$BODY"
  exit 0
fi



PORT=${PORT:-5555}
SCRIPT_PATH=$(realpath "${BASH_SOURCE[0]}")

echo "Listening on localhost:$PORT..."
output=$(socat TCP-LISTEN:$PORT,fork,reuseaddr EXEC:"$SCRIPT_PATH --handle --ignore=\"\$IGNORE\"" 2>&1)
exit_code=$?
if [[ "$output" == *"Permission denied" ]]; then
  echo "Error: $output"
  echo "Probably the port is bad, try a different one."
elif [[ $exit_code -ne 0 ]]; then
  echo "Error: $output"
fi
# vim: ts=2 sts=2 sw=2 et
